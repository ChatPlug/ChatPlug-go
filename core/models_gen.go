// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package core

import (
	"fmt"
	"io"
	"strconv"
)

type NewMessage struct {
	ID             string `json:"id"`
	Body           string `json:"body"`
	AuthorName     string `json:"authorName"`
	AuthorOriginID string `json:"authorOriginId"`
	OriginID       string `json:"originId"`
}

type NewThread struct {
	ServiceID string `json:"serviceId"`
	OriginID  string `json:"originId"`
	GroupID   string `json:"groupId"`
	Name      string `json:"name"`
}

type InstanceStatus string

const (
	InstanceStatusRunning      InstanceStatus = "RUNNING"
	InstanceStatusInitialized  InstanceStatus = "INITIALIZED"
	InstanceStatusShuttingDown InstanceStatus = "SHUTTING_DOWN"
	InstanceStatusStopped      InstanceStatus = "STOPPED"
)

var AllInstanceStatus = []InstanceStatus{
	InstanceStatusRunning,
	InstanceStatusInitialized,
	InstanceStatusShuttingDown,
	InstanceStatusStopped,
}

func (e InstanceStatus) IsValid() bool {
	switch e {
	case InstanceStatusRunning, InstanceStatusInitialized, InstanceStatusShuttingDown, InstanceStatusStopped:
		return true
	}
	return false
}

func (e InstanceStatus) String() string {
	return string(e)
}

func (e *InstanceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InstanceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InstanceStatus", str)
	}
	return nil
}

func (e InstanceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
